cmake_minimum_required(VERSION 3.8)
project(ashkal)

if(WIN32)
  set(BOOST_INCLUDE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../boost_1_67_0/include/boost-1_67")
  set(BOOST_DEBUG_PATH "${CMAKE_CURRENT_SOURCE_DIR}../boost_1_67_0/lib")
  set(BOOST_OPTIMIZED_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../boost_1_67_0/lib")
  set(CATCH2_INCLUDE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/")
  set(QTDIR "${CMAKE_CURRENT_SOURCE_DIR}/../qt-5.11.2")
  set(QT_INCLUDE_PATH "${QTDIR}/qtbase/include")
  set(QT_CORE_INCLUDE_PATH "${QT_INCLUDE_PATH}/QtCore")
  set(QT_GUI_INCLUDE_PATH "${QT_INCLUDE_PATH}/QtGui")
  set(QT_SVG_INCLUDE_PATH "${QTDIR}/qtsvg/include")
  set(QT_WIDGETS_INCLUDE_PATH "${QT_INCLUDE_PATH}/QtWidgets")
  set(QT_LIBRARY_DEBUG_PATH "${QTDIR}/qtbase/lib")
  set(QT_LIBRARY_OPTIMIZED_PATH "${QTDIR}/qtbase/lib")
  set(QT_ACCESS_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5AccessibilitySupportd.lib")
  set(QT_ACCESS_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5AccessibilitySupport.lib")
  set(QT_CORE_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5Cored.lib")
  set(QT_CORE_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5Core.lib")
  set(QT_EVENT_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5EventDispatcherSupportd.lib")
  set(QT_EVENT_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5EventDispatcherSupport.lib")
  set(QT_FONT_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5FontDatabaseSupportd.lib")
  set(QT_FONT_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5FontDatabaseSupport.lib")
  set(QT_FREETYPE_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/qtfreetyped.lib")
  set(QT_FREETYPE_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/qtfreetype.lib")
  set(QT_GIF_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/../plugins/imageformats/qgifd.lib")
  set(QT_GIF_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_DEBUG_PATH}/../plugins/imageformats/qgif.lib")
  set(QT_GUI_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5Guid.lib")
  set(QT_GUI_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5Gui.lib")
  set(QT_HBNG_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/qtharfbuzzd.lib")
  set(QT_HBNG_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/qtharfbuzz.lib")
  set(QT_MAIN_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/QtMaind.lib")
  set(QT_MAIN_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/QtMain.lib")
  set(QT_PCRE_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/qtpcre2d.lib")
  set(QT_PCRE_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/qtpcre2.lib")
  set(QT_PNG_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/qtlibpngd.lib")
  set(QT_PNG_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/qtlibpng.lib")
  set(QT_SVG_ICON_PLUGIN_LIBRARY_DEBUG_PATH "${QTDIR}/qtsvg/plugins/iconengines/qsvgicond.lib")
  set(QT_SVG_ICON_PLUGIN_LIBRARY_OPTIMIZED_PATH "${QTDIR}/qtsvg/plugins/iconengines/qsvgicon.lib")
  set(QT_SVG_LIBRARY_DEBUG_PATH "${QTDIR}/qtsvg/lib/Qt5Svgd.lib")
  set(QT_SVG_LIBRARY_OPTIMIZED_PATH "${QTDIR}/qtsvg/lib/Qt5Svg.lib")
  set(QT_THEME_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5ThemeSupportd.lib")
  set(QT_THEME_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5ThemeSupport.lib")
  set(QT_WIDGETS_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5Widgetsd.lib")
  set(QT_WIDGETS_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5Widgets.lib")
  set(QT_WINDOWS_LIBRARY_DEBUG_PATH "${QTDIR}/qtbase/plugins/platforms/qwindowsd.lib")
  set(QT_WINDOWS_LIBRARY_OPTIMIZED_PATH "${QTDIR}/qtbase/plugins/platforms/qwindows.lib")
  set(QT_WINDOWS_ACCESSIBILITY_LIBRARY_DEBUG_PATH "${QT_LIBRARY_DEBUG_PATH}/Qt5WindowsUIAutomationSupportd.lib")
  set(QT_WINDOWS_ACCESSIBILITY_LIBRARY_OPTIMIZED_PATH "${QT_LIBRARY_OPTIMIZED_PATH}/Qt5WindowsUIAutomationSupport.lib")
  set(CMAKE_PREFIX_PATH "${QTDIR}/qtbase/lib/cmake")
  message(STATUS ${CMAKE_PREFIX_PATH})
else()
  execute_process(COMMAND ./Build/set_env.sh)
endif()
include_directories(./Include)
include_directories(${BOOST_INCLUDE_PATH})
include_directories(${CATCH2_INCLUDE_PATH})
include_directories(${QT_INCLUDE_PATH})
include_directories(${QT_CORE_INCLUDE_PATH})
include_directories(${QT_GUI_INCLUDE_PATH})
include_directories(${QT_SVG_INCLUDE_PATH})
include_directories(${QT_WIDGETS_INCLUDE_PATH})
link_directories(${BOOST_DEBUG_PATH})
link_directories(${BOOST_OPTIMIZED_PATH})
set(CMAKE_LIBRARY_FLAGS "")
if(MSVC)
  set(CMAKE_LIBRARY_FLAGS "/LTCG")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj /MP /std:c++17 /Wv:18 /WX")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  add_definitions(-DNOMINMAX)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-D_WIN32_WINNT=0x0501)
  add_definitions(-DWIN32_LEAN_AND_MEAN)
  add_definitions(/experimental:external)
  add_definitions(/external:W0)
  add_definitions(/external:anglebrackets)
endif()
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
    ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -O3 -DNDEBUG")
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -pthreads")
endif()
add_subdirectory(Build/Ashkal)
add_subdirectory(Build/Library)
add_subdirectory(Build/Tests)
